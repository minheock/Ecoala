<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ecoala.ele.mbrMember.dao.IMngMemberDAO">

	<!-- member 회원가입 -->
	<insert id="registMember" parameterType="MngMemberVO">
		INSERT INTO member(
		mem_id
		,user_id
		,user_pw
		,user_nm
		,mem_no
		,job_type
		,house_type
		,house_area
		,region
		)
		VALUES(
		#{memId}
		,#{userId}
		,#{userPw}
		,#{userNm}
		,#{memNo}
		,#{jobType}
		,#{houseType}
		,#{houseArea}
		,#{region}
		)
	</insert>
	<insert id="registMemInfo" parameterType="MngMemberVO">
		<!-- 생성된 키 값을 memId 에 할당 // 반환된는 값의 타입 지정 //쿼리 실행 순서 주 쿼리 실행 전에 실행되어야함을 
			의미 -->
		<selectKey keyProperty="memId" resultType="String"
			order="BEFORE">
			SELECT mem_info_seq.nextval AS memId FROM dual
		</selectKey>

		INSERT INTO mem_info(
		mem_id
		,mem_no
		,job_type
		,house_type
		,house_area
		,region
		)
		VALUES(
		#{memId}
		,#{memNo}
		,#{jobType}
		,#{houseType}
		,#{houseArea}
		,#{region}
		)
	</insert>
	<!-- 중복 아이디 체크 쿼리 -->
    <select id="checkId" parameterType="string" resultType="boolean">
    SELECT COUNT(*)
    FROM MEMBER 
    WHERE USER_ID = #{userId}
	</select>
	<!-- member 유저 로그인 -->
	<select id="loginMember" parameterType="MngMemberVO"
		resultType="MngMemberVO">
		SELECT user_id
		,user_pw
		,mem_id
		FROM member
		WHERE user_id =
		#{userId, jdbcType=VARCHAR}
		AND del_Yn = 'N'
	</select>
	<!-- member 관리자 로그인 -->
	<select id="mngrMember" parameterType="MngMemberVO"
		resultType="MngMemberVO">
		SELECT user_id
		,user_pw
		,authority
		FROM member
		WHERE user_id =
		#{userId, jdbcType=VARCHAR}
		AND authority = 'Y'
	</select>
	
	<!-- member 회원정보 조회 -->
	<select id="mngrMemberList" resultType="MngMemberVO"
		parameterType="SearchVO">
		<include refid="prePage"></include>
		SELECT user_id, user_nm,
		to_char(user_dt,'YYYY-MM-DD') as user_dt,
		del_yn
		FROM member
		WHERE 1=1
		<include refid="condBoardSearch"></include>
		ORDER BY user_id DESC
		<include refid="postPage"></include>
	</select>

	<sql id="prePage">
		SELECT * FROM (
		SELECT a.* , rownum as rnum FROM (
	</sql>

	<sql id="postPage">
		) a )b
		WHERE rnum between #{firstRow} and #{lastRow}
	</sql>

	<!--검색조건 정적메소드 사용 방법. @클래스이름@메소드이름(파라미터이름) -->
	<sql id="condBoardSearch">
		<!--isNotBlank 메서드는 문자열이 null이거나 공백 문자로만 이루어져 있지 않은지를 확인하는 메서드 -->
		<if
			test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchWord)">
			<choose>
				<when test='searchOption=="userId"'>
					AND user_id LIKE '%'|| #{searchWord} || '%'
				</when>
				<when test='searchOption=="userNm"'>
					AND user_nm LIKE '%'|| #{searchWord} || '%'
				</when>
			</choose>
		</if>
	</sql>

	<!-- public int getTotalRowCount(BoardVO searchVO); /*목록 건수 조회*/ -->
	<select id="getTotalRowCount" parameterType="BoardVO"
		resultType="int">
		SELECT count(*)
		FROM member
		WHERE 1=1
		<include refid="condBoardSearch"></include>
	</select>

	<!-- member 상세정보 조회 -->
	<select id="getmember" resultType="MngMemberVO"
		parameterType="String">
		SELECT mem_id, user_id, user_nm, mem_no, job_type,
		house_type
		,house_area, region, to_char(user_dt,'YYYY-MM-DD') as
		user_dt, del_yn
		FROM member
		where user_id = #{userId, jdbcType=VARCHAR}
	</select>
	<!-- member 삭제 -->
	<update id="deleteMember" parameterType="String">
		UPDATE member
		SET del_yn
		= 'Y'
		WHERE mem_id = #{memId}
	</update>
	<!-- 마이페이지 회원수정 -->
	<update id="updateMember" parameterType="MngMemberVO">
		UPDATE MEMBER
		SET USER_NM = #{userNm}
		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(userPw)">
			,USER_PW = #{userPw}
		</if>
		,MEM_NO = #{memNo}
		,JOB_TYPE = #{jobType}
		,HOUSE_TYPE = #{houseType}
		,HOUSE_AREA = #{houseArea}
		,REGION = #{region}
		WHERE USER_ID = #{userId}
	</update>
	<!-- 마이페이지 포인트 조회 -->
	<select id="memberPoint" resultType="cboPointVO"
		parameterType="MngMemberVO">
		SELECT user_id,to_char(dt,'YYYYMMDDHH24MI') AS dt,
      	point,SUM(point) OVER (ORDER BY dt) AS totalPoints
		FROM mem_point
		where user_id = #{userId}
		ORDER BY dt desc

	</select>
</mapper>
